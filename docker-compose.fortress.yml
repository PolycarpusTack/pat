# =============================================================================
# Pat Fortress - Complete Production Docker Compose Infrastructure
# =============================================================================
version: '3.8'

# ================================
# SECRETS MANAGEMENT
# ================================
secrets:
  postgres_password:
    external: true
    name: pat_postgres_password
  redis_password:
    external: true
    name: pat_redis_password
  jwt_private_key:
    external: true
    name: pat_jwt_private_key
  jwt_public_key:
    external: true
    name: pat_jwt_public_key
  ssl_cert:
    external: true
    name: pat_ssl_cert
  ssl_key:
    external: true
    name: pat_ssl_key

# ================================
# CORE SERVICES
# ================================
services:
  # ================================
  # Infrastructure Services
  # ================================
  
  # PostgreSQL Primary Database - SECURITY UPDATED
  postgres-primary:
    image: postgres:15.9-alpine  # Updated from 15-alpine - security patches
    container_name: fortress-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fortress_production}
      POSTGRES_USER: ${POSTGRES_USER:-fortress_user}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/:ro
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    secrets:
      - postgres_password
    networks:
      - fortress-backend
      - fortress-database
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fortress_user} -d ${POSTGRES_DB:-fortress_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: fortress-postgres-replica
    restart: unless-stopped
    depends_on:
      - postgres-primary
    environment:
      PGUSER: ${POSTGRES_USER:-fortress_user}
      POSTGRES_DB: ${POSTGRES_DB:-fortress_production}
      POSTGRES_USER: ${POSTGRES_USER:-fortress_user}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./scripts/postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    secrets:
      - postgres_password
    networks:
      - fortress-database
    ports:
      - "127.0.0.1:5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fortress_user} -d ${POSTGRES_DB:-fortress_production}"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cluster Master
  redis-master:
    image: redis:7.4-alpine  # Updated from 7-alpine - security patches
    container_name: fortress-redis-master
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_master_data:/data
      - ./config/redis/redis-master.conf:/usr/local/etc/redis/redis.conf:ro
    secrets:
      - redis_password
    networks:
      - fortress-backend
      - fortress-cache
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7.4-alpine  # Updated from 7-alpine - security patches
    container_name: fortress-redis-sentinel
    restart: unless-stopped
    depends_on:
      - redis-master
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./config/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    networks:
      - fortress-cache
    ports:
      - "127.0.0.1:26379:26379"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ================================
  # Message Queue & Event Streaming
  # ================================
  
  # Apache Kafka with KRaft (No Zookeeper)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fortress-kafka
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
      - ./config/kafka/server.properties:/etc/kafka/server.properties:ro
    networks:
      - fortress-backend
      - fortress-messaging
    ports:
      - "127.0.0.1:9092:9092"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ================================
  # Fortress Core Services
  # ================================

  # Fortress Core Application
  fortress-core:
    build:
      context: .
      dockerfile: Dockerfile.fortress-core
      target: production
      cache_from:
        - fortress/core:latest
    image: fortress/core:${VERSION:-latest}
    container_name: fortress-core
    restart: unless-stopped
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - FORTRESS_ENV=production
      - PORT=8025
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-primary:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer
      - DATABASE_REPLICA_URL=postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-replica:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer
      - REDIS_URL=redis://:$$(cat /run/secrets/redis_password)@redis-master:6379/0
      - KAFKA_BROKERS=kafka:29092
      - JWT_PRIVATE_KEY_FILE=/run/secrets/jwt_private_key
      - JWT_PUBLIC_KEY_FILE=/run/secrets/jwt_public_key
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://fortress.pat.local}
      - RATE_LIMIT_ENABLED=true
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
    volumes:
      - fortress_logs:/app/logs
      - fortress_storage:/app/storage
      - fortress_temp:/app/temp
    secrets:
      - postgres_password
      - redis_password
      - jwt_private_key
      - jwt_public_key
    networks:
      - fortress-frontend
      - fortress-backend
    ports:
      - "8025:8025"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # SMTP Server
  fortress-smtp:
    build:
      context: .
      dockerfile: Dockerfile.smtp
      target: production
      cache_from:
        - fortress/smtp:latest
    image: fortress/smtp:${VERSION:-latest}
    container_name: fortress-smtp
    restart: unless-stopped
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - FORTRESS_ENV=production
      - SMTP_PORT=1025
      - SMTP_HOST=0.0.0.0
      - SMTP_MAX_CONNECTIONS=1000
      - SMTP_MAX_MESSAGE_SIZE=52428800
      - SMTP_TIMEOUT=300000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-primary:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer
      - REDIS_URL=redis://:$$(cat /run/secrets/redis_password)@redis-master:6379/1
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC_EMAILS=fortress.emails.received
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - METRICS_ENABLED=true
    volumes:
      - smtp_logs:/app/logs
      - email_storage:/app/storage
    secrets:
      - postgres_password
      - redis_password
    networks:
      - fortress-backend
      - fortress-smtp
    ports:
      - "1025:1025"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # GraphQL API Server
  fortress-api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
      cache_from:
        - fortress/api:latest
    image: fortress/api:${VERSION:-latest}
    container_name: fortress-api
    restart: unless-stopped
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - API_PORT=8025
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-primary:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer
      - DATABASE_REPLICA_URL=postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-replica:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer
      - REDIS_URL=redis://:$$(cat /run/secrets/redis_password)@redis-master:6379/2
      - KAFKA_BROKERS=kafka:29092
      - JWT_PRIVATE_KEY_FILE=/run/secrets/jwt_private_key
      - JWT_PUBLIC_KEY_FILE=/run/secrets/jwt_public_key
      - CORS_ORIGINS=${CORS_ORIGINS:-https://fortress.pat.local}
      - GRAPHQL_PLAYGROUND=false
      - GRAPHQL_INTROSPECTION=false
      - RATE_LIMIT_ENABLED=true
      - MAX_QUERY_COMPLEXITY=1000
      - MAX_QUERY_DEPTH=10
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    secrets:
      - postgres_password
      - redis_password
      - jwt_private_key
      - jwt_public_key
    networks:
      - fortress-frontend
      - fortress-backend
    expose:
      - "8025"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1.5G
        reservations:
          cpus: '1.0'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Plugin Runtime Engine
  fortress-plugins:
    build:
      context: .
      dockerfile: Dockerfile.plugins
      target: production
      cache_from:
        - fortress/plugins:latest
    image: fortress/plugins:${VERSION:-latest}
    container_name: fortress-plugins
    restart: unless-stopped
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - FORTRESS_ENV=production
      - PLUGIN_RUNTIME_PORT=8026
      - MAX_PLUGIN_MEMORY=128
      - MAX_PLUGIN_EXECUTION_TIME=30000
      - MAX_CONCURRENT_PLUGINS=20
      - PLUGIN_ISOLATION_ENABLED=true
      - PLUGIN_NETWORK_ACCESS=restricted
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-primary:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer
      - REDIS_URL=redis://:$$(cat /run/secrets/redis_password)@redis-master:6379/3
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - plugin_storage:/app/plugins:ro
      - plugin_logs:/app/logs
      - plugin_temp:/app/temp
    secrets:
      - postgres_password
      - redis_password
    networks:
      - fortress-backend
      - fortress-plugins
    expose:
      - "8026"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Workflow Engine
  fortress-workflows:
    build:
      context: .
      dockerfile: Dockerfile.workflows
      target: production
      cache_from:
        - fortress/workflows:latest
    image: fortress/workflows:${VERSION:-latest}
    container_name: fortress-workflows
    restart: unless-stopped
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - FORTRESS_ENV=production
      - WORKFLOW_ENGINE_PORT=8027
      - MAX_CONCURRENT_WORKFLOWS=100
      - WORKFLOW_TIMEOUT=300000
      - WORKFLOW_RETRY_ATTEMPTS=3
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-primary:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer
      - REDIS_URL=redis://:$$(cat /run/secrets/redis_password)@redis-master:6379/4
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - workflow_storage:/app/workflows:ro
      - workflow_logs:/app/logs
      - workflow_state:/app/state
    secrets:
      - postgres_password
      - redis_password
    networks:
      - fortress-backend
    expose:
      - "8027"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8027/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1.5G
        reservations:
          cpus: '1.0'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Frontend Application
  fortress-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      cache_from:
        - fortress/frontend:latest
      args:
        - NEXT_PUBLIC_API_URL=https://fortress.pat.local/api
        - NEXT_PUBLIC_WS_URL=wss://fortress.pat.local/ws
        - NEXT_PUBLIC_ENVIRONMENT=production
    image: fortress/frontend:${VERSION:-latest}
    container_name: fortress-frontend
    restart: unless-stopped
    depends_on:
      fortress-api:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://fortress.pat.local/api
      - NEXT_PUBLIC_WS_URL=wss://fortress.pat.local/ws
      - NEXT_PUBLIC_ENVIRONMENT=production
    volumes:
      - frontend_logs:/app/logs
    networks:
      - fortress-frontend
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # ================================
  # Infrastructure & Monitoring
  # ================================

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:1.24-alpine
    container_name: fortress-nginx
    restart: unless-stopped
    depends_on:
      fortress-frontend:
        condition: service_healthy
      fortress-api:
        condition: service_healthy
      fortress-smtp:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    secrets:
      - ssl_cert
      - ssl_key
    networks:
      - fortress-frontend
      - fortress-external
    ports:
      - "80:80"
      - "443:443"
      - "1025:1025"  # SMTP
      - "8025:8025"  # API (development only)
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: fortress-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - fortress-backend
      - fortress-monitoring
    ports:
      - "127.0.0.1:9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    user: "1001:1001"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: fortress-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-fortress123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SERVER_ROOT_URL=https://fortress.pat.local/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/plugins:/var/lib/grafana/plugins
    networks:
      - fortress-monitoring
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    user: "1001:1001"

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49.0
    container_name: fortress-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - QUERY_BASE_PATH=/jaeger
    networks:
      - fortress-monitoring
    expose:
      - "16686"
      - "14268"
    ports:
      - "127.0.0.1:16686:16686"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Loki Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: fortress-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - fortress-monitoring
    expose:
      - "3100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Promtail Log Collector
  promtail:
    image: grafana/promtail:2.9.0
    container_name: fortress-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - fortress_logs:/fortress/logs:ro
      - smtp_logs:/fortress/smtp:ro
      - api_logs:/fortress/api:ro
      - plugin_logs:/fortress/plugins:ro
      - workflow_logs:/fortress/workflows:ro
      - frontend_logs:/fortress/frontend:ro
      - nginx_logs:/fortress/nginx:ro
    networks:
      - fortress-monitoring
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # AlertManager for Alert Routing and Notifications
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: fortress-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://fortress.pat.local/alertmanager'
      - '--web.route-prefix=/alertmanager'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--log.level=info'
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./monitoring/alertmanager/templates:/etc/alertmanager/templates:ro
      - alertmanager_data:/alertmanager
    environment:
      - SMTP_HOST=${SMTP_HOST:-localhost:587}
      - SMTP_USERNAME=${SMTP_USERNAME:-fortress}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-fortress123}
      - SLACK_API_URL=${SLACK_API_URL}
      - PAGERDUTY_WEBHOOK_URL=${PAGERDUTY_WEBHOOK_URL}
      - PAGERDUTY_TOKEN=${PAGERDUTY_TOKEN}
    networks:
      - fortress-monitoring
    expose:
      - "9093"
      - "9094"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    user: "1001:1001"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: fortress-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
      - '--collector.interrupts'
      - '--collector.tcpstat'
      - '--collector.meminfo_numa'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - fortress-monitoring
    expose:
      - "9100"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true
    pid: host

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: fortress-cadvisor
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - fortress-monitoring
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    command:
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl'
      - '--store_container_labels=false'
      - '--whitelisted_container_labels=io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace'

  # PostgreSQL Exporter for Database Metrics
  postgres-exporter-primary:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: fortress-postgres-exporter-primary
    restart: unless-stopped
    depends_on:
      postgres-primary:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-primary:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
      PG_EXPORTER_EXCLUDE_DATABASES: "template0,template1"
    secrets:
      - postgres_password
    volumes:
      - ./monitoring/postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - fortress-monitoring
      - fortress-database
    expose:
      - "9187"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  postgres-exporter-replica:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: fortress-postgres-exporter-replica
    restart: unless-stopped
    depends_on:
      postgres-replica:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-fortress_user}:$$(cat /run/secrets/postgres_password)@postgres-replica:5432/${POSTGRES_DB:-fortress_production}?sslmode=prefer"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
      PG_EXPORTER_EXCLUDE_DATABASES: "template0,template1"
    secrets:
      - postgres_password
    volumes:
      - ./monitoring/postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - fortress-monitoring
      - fortress-database
    expose:
      - "9187"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Redis Exporter for Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: fortress-redis-exporter
    restart: unless-stopped
    depends_on:
      redis-master:
        condition: service_healthy
    environment:
      REDIS_ADDR: "redis://:$$(cat /run/secrets/redis_password)@redis-master:6379"
      REDIS_EXPORTER_INCL_SYSTEM_METRICS: "true"
      REDIS_EXPORTER_CHECK_KEYS: "fortress:*,session:*,cache:*"
    secrets:
      - redis_password
    networks:
      - fortress-monitoring
      - fortress-cache
    expose:
      - "9121"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Kafka Exporter for Message Queue Metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.6.0
    container_name: fortress-kafka-exporter
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    command:
      - '--kafka.server=kafka:29092'
      - '--topic.filter=fortress.*'
      - '--group.filter=fortress.*'
      - '--log.level=info'
      - '--web.listen-address=:9308'
    networks:
      - fortress-monitoring
      - fortress-messaging
    expose:
      - "9308"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Nginx Prometheus Exporter
  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: fortress-nginx-exporter
    restart: unless-stopped
    depends_on:
      - nginx
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
      - '-web.listen-address=:9113'
    networks:
      - fortress-monitoring
      - fortress-frontend
    expose:
      - "9113"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

# ================================
# NETWORKS
# ================================
networks:
  fortress-external:
    driver: bridge
    name: fortress-external
  fortress-frontend:
    driver: bridge
    name: fortress-frontend
    internal: false
  fortress-backend:
    driver: bridge
    name: fortress-backend
    internal: true
  fortress-database:
    driver: bridge
    name: fortress-database
    internal: true
  fortress-cache:
    driver: bridge
    name: fortress-cache
    internal: true
  fortress-messaging:
    driver: bridge
    name: fortress-messaging
    internal: true
  fortress-smtp:
    driver: bridge
    name: fortress-smtp
    internal: true
  fortress-plugins:
    driver: bridge
    name: fortress-plugins
    internal: true
  fortress-monitoring:
    driver: bridge
    name: fortress-monitoring
    internal: true

# ================================
# VOLUMES
# ================================
volumes:
  # Database
  postgres_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/postgres/primary
  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/postgres/replica
  
  # Cache
  redis_master_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/redis/master
  
  # Messaging
  kafka_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/kafka
  
  # Application Storage
  fortress_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/app/storage
  fortress_temp:
    driver: local
  email_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/app/emails
  plugin_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/app/plugins
  plugin_temp:
    driver: local
  workflow_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/app/workflows
  workflow_state:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/app/workflow-state
  api_uploads:
    driver: local
  
  # Logs
  fortress_logs:
    driver: local
  smtp_logs:
    driver: local
  api_logs:
    driver: local
  plugin_logs:
    driver: local
  workflow_logs:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/monitoring/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/monitoring/grafana
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/monitoring/loki
  
  # Cache & Temp
  nginx_cache:
    driver: local
  
  # Monitoring Data
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/fortress}/monitoring/alertmanager