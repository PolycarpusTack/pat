# =============================================================================
# Pat Fortress - Kubernetes Deployments
# =============================================================================

---
# PostgreSQL Primary Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-postgres-primary
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: pat-fortress
    app.kubernetes.io/instance: primary
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-postgres
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: primary
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: primary
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.13.2
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_DB
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: fortress-postgres-primary-pvc
      - name: postgres-config
        configMap:
          name: fortress-postgres-config
      - name: postgres-init
        configMap:
          name: fortress-postgres-init

---
# Redis Master
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-redis-master
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: pat-fortress
    app.kubernetes.io/instance: master
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-redis
      app.kubernetes.io/component: cache
      app.kubernetes.io/instance: master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/instance: master
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        command:
        - redis-server
        - /etc/redis/redis.conf
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-redis-secret
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.53.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-redis-secret
              key: REDIS_PASSWORD
        - name: REDIS_ADDR
          value: "localhost:6379"
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: fortress-redis-master-pvc
      - name: redis-config
        configMap:
          name: fortress-redis-config

---
# Kafka
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-kafka
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-kafka
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: pat-fortress
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-kafka
      app.kubernetes.io/component: messaging
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-kafka
        app.kubernetes.io/component: messaging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9308"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9308
          name: metrics
        env:
        - name: KAFKA_NODE_ID
          value: "1"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://fortress-kafka-service:9092,PLAINTEXT_HOST://localhost:9092"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9094"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "1@fortress-kafka-service:9093"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_LOG_DIRS
          value: "/tmp/kraft-combined-logs"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_JMX_PORT
          value: "9308"
        volumeMounts:
        - name: kafka-data
          mountPath: /tmp/kraft-combined-logs
        livenessProbe:
          exec:
            command:
            - kafka-topics
            - --bootstrap-server
            - localhost:9092
            - --list
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - kafka-topics
            - --bootstrap-server
            - localhost:9092
            - --list
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: fortress-kafka-pvc

---
# Fortress Core Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-core
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-core
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: pat-fortress
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-core
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-core
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
      - name: fortress-core
        image: fortress/core:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8025
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: FORTRESS_ENV
          value: "production"
        - name: PORT
          value: "8025"
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@fortress-postgres-primary-service:5432/$(POSTGRES_DB)?sslmode=require"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@fortress-redis-master-service:6379/0"
        - name: KAFKA_BROKERS
          value: "fortress-kafka-service:9092"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-redis-secret
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fortress-jwt-secret
              key: JWT_SECRET
        volumeMounts:
        - name: fortress-config
          mountPath: /app/config
        - name: fortress-storage
          mountPath: /app/storage
        - name: fortress-logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: fortress-config
        configMap:
          name: fortress-core-config
      - name: fortress-storage
        persistentVolumeClaim:
          claimName: fortress-storage-pvc
      - name: fortress-logs
        emptyDir: {}

---
# Fortress SMTP Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-smtp
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-smtp
    app.kubernetes.io/component: smtp
    app.kubernetes.io/part-of: pat-fortress
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-smtp
      app.kubernetes.io/component: smtp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-smtp
        app.kubernetes.io/component: smtp
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
      - name: fortress-smtp
        image: fortress/smtp:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 1025
          name: smtp
        - containerPort: 8080
          name: metrics
        env:
        - name: FORTRESS_ENV
          value: "production"
        - name: SMTP_PORT
          value: "1025"
        - name: SMTP_HOST
          value: "0.0.0.0"
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@fortress-postgres-primary-service:5432/$(POSTGRES_DB)?sslmode=require"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@fortress-redis-master-service:6379/1"
        - name: KAFKA_BROKERS
          value: "fortress-kafka-service:9092"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-redis-secret
              key: REDIS_PASSWORD
        volumeMounts:
        - name: smtp-config
          mountPath: /app/config
        - name: email-storage
          mountPath: /app/storage
        - name: smtp-logs
          mountPath: /app/logs
        livenessProbe:
          tcpSocket:
            port: smtp
          initialDelaySeconds: 45
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: smtp
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: smtp-config
        configMap:
          name: fortress-smtp-config
      - name: email-storage
        persistentVolumeClaim:
          claimName: fortress-email-storage-pvc
      - name: smtp-logs
        emptyDir: {}

---
# Fortress GraphQL API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-api
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-api
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: pat-fortress
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-api
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-api
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
      - name: fortress-api
        image: fortress/api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8025
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: NODE_ENV
          value: "production"
        - name: API_PORT
          value: "8025"
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@fortress-postgres-primary-service:5432/$(POSTGRES_DB)?sslmode=require"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@fortress-redis-master-service:6379/2"
        - name: KAFKA_BROKERS
          value: "fortress-kafka-service:9092"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: fortress-database-secret
              key: POSTGRES_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fortress-redis-secret
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fortress-jwt-secret
              key: JWT_SECRET
        - name: JWT_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: fortress-jwt-secret
              key: JWT_PRIVATE_KEY
        - name: JWT_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: fortress-jwt-secret
              key: JWT_PUBLIC_KEY
        volumeMounts:
        - name: api-config
          mountPath: /app/config
        - name: api-uploads
          mountPath: /app/uploads
        - name: api-logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1.5Gi"
            cpu: "1000m"
      volumes:
      - name: api-config
        configMap:
          name: fortress-api-config
      - name: api-uploads
        persistentVolumeClaim:
          claimName: fortress-api-uploads-pvc
      - name: api-logs
        emptyDir: {}

---
# Fortress Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-frontend
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-frontend
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: pat-fortress
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-frontend
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-frontend
        app.kubernetes.io/component: frontend
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
      - name: fortress-frontend
        image: fortress/frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "https://fortress.pat.local/api"
        - name: NEXT_PUBLIC_WS_URL
          value: "wss://fortress.pat.local/ws"
        - name: NEXT_PUBLIC_ENVIRONMENT
          value: "production"
        volumeMounts:
        - name: frontend-logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: frontend-logs
        emptyDir: {}

---
# Nginx Reverse Proxy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-nginx
  namespace: fortress
  labels:
    app.kubernetes.io/name: fortress-nginx
    app.kubernetes.io/component: proxy
    app.kubernetes.io/part-of: pat-fortress
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fortress-nginx
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fortress-nginx
        app.kubernetes.io/component: proxy
    spec:
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        runAsNonRoot: true
        fsGroup: 101
      containers:
      - name: nginx
        image: nginx:1.24-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        - containerPort: 1025
          name: smtp
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
        - name: nginx-logs
          mountPath: /var/log/nginx
        - name: nginx-cache
          mountPath: /var/cache/nginx
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
      volumes:
      - name: nginx-config
        configMap:
          name: fortress-nginx-config
      - name: nginx-ssl
        secret:
          secretName: fortress-tls-secret
      - name: nginx-logs
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}