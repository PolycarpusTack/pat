version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pat-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pat_production}
      POSTGRES_USER: ${POSTGRES_USER:-pat_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/
    networks:
      - pat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pat_user} -d ${POSTGRES_DB:-pat_production}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pat-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: pat-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - pat-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: pat-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Pat SMTP Server
  pat-smtp:
    build:
      context: .
      dockerfile: Dockerfile.smtp
      target: production
    container_name: pat-smtp
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-pat_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pat_production}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - SMTP_PORT=${SMTP_PORT:-1025}
      - SMTP_HOST=${SMTP_HOST:-0.0.0.0}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
    ports:
      - "${SMTP_PORT:-1025}:1025"
    volumes:
      - smtp_logs:/app/logs
      - email_storage:/app/storage
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Pat GraphQL API Server
  pat-api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: pat-api
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-pat_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pat_production}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - API_PORT=${API_PORT:-8025}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
    ports:
      - "${API_PORT:-8025}:8025"
    volumes:
      - api_logs:/app/logs
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pat Frontend (Next.js)
  pat-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8025}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8025}
    container_name: pat-frontend
    restart: unless-stopped
    depends_on:
      - pat-api
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://pat-api:8025}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://pat-api:8025}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pat Plugin Runtime
  pat-plugins:
    build:
      context: .
      dockerfile: Dockerfile.plugins
      target: production
    container_name: pat-plugins
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-pat_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pat_production}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - PLUGIN_RUNTIME_PORT=${PLUGIN_RUNTIME_PORT:-8026}
      - MAX_PLUGIN_MEMORY=${MAX_PLUGIN_MEMORY:-128}
      - MAX_PLUGIN_EXECUTION_TIME=${MAX_PLUGIN_EXECUTION_TIME:-30000}
    ports:
      - "${PLUGIN_RUNTIME_PORT:-8026}:8026"
    volumes:
      - plugin_storage:/app/plugins
      - plugin_logs:/app/logs
    networks:
      - pat-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workflow Engine
  pat-workflows:
    build:
      context: .
      dockerfile: Dockerfile.workflows
      target: production
    container_name: pat-workflows
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-pat_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pat_production}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - WORKFLOW_ENGINE_PORT=${WORKFLOW_ENGINE_PORT:-8027}
      - MAX_CONCURRENT_WORKFLOWS=${MAX_CONCURRENT_WORKFLOWS:-100}
    ports:
      - "${WORKFLOW_ENGINE_PORT:-8027}:8027"
    volumes:
      - workflow_logs:/app/logs
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8027/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: pat-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: pat-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47.0
    container_name: pat-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: pat-nginx
    restart: unless-stopped
    depends_on:
      - pat-frontend
      - pat-api
      - pat-smtp
    ports:
      - "80:80"
      - "443:443"
      - "1025:1025"  # SMTP port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - pat-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  smtp_logs:
    driver: local
  api_logs:
    driver: local
  plugin_logs:
    driver: local
  workflow_logs:
    driver: local
  nginx_logs:
    driver: local
  email_storage:
    driver: local
  plugin_storage:
    driver: local

networks:
  pat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16