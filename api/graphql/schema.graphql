# Pat Platform GraphQL Schema

scalar DateTime
scalar JSON
scalar Upload

# Enums
enum EmailStatus {
  RECEIVED
  PROCESSING
  PROCESSED
  FAILED
  DELETED
}

enum EmailProtocol {
  SMTP
  HTTP
  GRAPHQL
  WEBSOCKET
  GRPC
}

enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum PluginStatus {
  ACTIVE
  INACTIVE
  ERROR
  INSTALLING
  UNINSTALLING
}

enum SortOrder {
  ASC
  DESC
}

# Common Types
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type EmailAddress {
  address: String!
  name: String
}

input EmailAddressInput {
  address: String!
  name: String
}

type Attachment {
  id: ID!
  filename: String!
  contentType: String!
  size: Int!
  url: String!
  contentId: String
  isInline: Boolean!
  checksum: String!
}

# Email Types
type Email {
  id: ID!
  messageId: String!
  conversationId: String
  from: EmailAddress!
  to: [EmailAddress!]!
  cc: [EmailAddress!]
  bcc: [EmailAddress!]
  replyTo: [EmailAddress!]
  subject: String
  textBody: String
  htmlBody: String
  headers: JSON!
  attachments: [Attachment!]!
  inlineImages: [Attachment!]!
  status: EmailStatus!
  protocol: EmailProtocol!
  sourceIp: String
  spamScore: Float
  spamDetails: JSON
  virusScanResult: JSON
  validationResults: JSON
  tags: [String!]!
  metadata: JSON
  receivedAt: DateTime!
  processedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmailConnection {
  edges: [EmailEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EmailEdge {
  node: Email!
  cursor: String!
}

input EmailFilter {
  status: EmailStatus
  protocol: EmailProtocol
  from: String
  to: String
  subject: String
  hasAttachments: Boolean
  spamScore: FloatRange
  receivedAfter: DateTime
  receivedBefore: DateTime
  tags: [String!]
  search: String
}

input FloatRange {
  min: Float
  max: Float
}

# Workflow Types
type Workflow {
  id: ID!
  name: String!
  description: String
  triggerRules: JSON!
  steps: [WorkflowStep!]!
  settings: JSON!
  isActive: Boolean!
  createdBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
  lastExecutedAt: DateTime
  executionCount: Int!
}

type WorkflowStep {
  id: ID!
  type: String!
  name: String!
  config: JSON!
  conditions: JSON
}

type WorkflowExecution {
  id: ID!
  workflow: Workflow!
  email: Email
  triggerType: String!
  status: WorkflowStatus!
  context: JSON!
  result: JSON
  errorMessage: String
  startedAt: DateTime!
  completedAt: DateTime
  duration: Int
}

# Plugin Types
type Plugin {
  id: ID!
  name: String!
  version: String!
  description: String
  author: String
  repositoryUrl: String
  manifest: JSON!
  config: JSON!
  status: PluginStatus!
  isGlobal: Boolean!
  installedAt: DateTime!
  updatedAt: DateTime!
}

# User and Auth Types
type User {
  id: ID!
  email: String!
  name: String!
  role: String!
  settings: JSON!
  lastLoginAt: DateTime
  createdAt: DateTime!
}

type ApiKey {
  id: ID!
  name: String!
  keyPreview: String!
  permissions: [String!]!
  rateLimit: Int!
  expiresAt: DateTime
  lastUsedAt: DateTime
  createdAt: DateTime!
}

# Template Types
type EmailTemplate {
  id: ID!
  name: String!
  subject: String!
  htmlBody: String!
  textBody: String
  variables: [TemplateVariable!]!
  category: String
  tags: [String!]!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TemplateVariable {
  name: String!
  type: String!
  required: Boolean!
  defaultValue: String
  description: String
}

# Webhook Types
type WebhookEndpoint {
  id: ID!
  url: String!
  events: [String!]!
  headers: JSON!
  isActive: Boolean!
  failureCount: Int!
  lastSuccessAt: DateTime
  lastFailureAt: DateTime
  createdAt: DateTime!
}

# Stats Types
type EmailStats {
  total: Int!
  received: Int!
  processed: Int!
  failed: Int!
  averageProcessingTime: Float!
  averageSize: Int!
}

type SystemStats {
  emails: EmailStats!
  storage: StorageStats!
  performance: PerformanceStats!
}

type StorageStats {
  totalSize: Int!
  attachmentSize: Int!
  emailCount: Int!
  attachmentCount: Int!
}

type PerformanceStats {
  avgResponseTime: Float!
  requestsPerSecond: Float!
  errorRate: Float!
  uptime: Float!
}

# Input Types
input CreateEmailInput {
  from: EmailAddressInput!
  to: [EmailAddressInput!]!
  cc: [EmailAddressInput!]
  bcc: [EmailAddressInput!]
  subject: String!
  textBody: String
  htmlBody: String
  attachments: [Upload!]
  headers: JSON
  scheduledAt: DateTime
}

input UpdateEmailInput {
  status: EmailStatus
  tags: [String!]
  metadata: JSON
}

input CreateWorkflowInput {
  name: String!
  description: String
  triggerRules: JSON!
  steps: [WorkflowStepInput!]!
  settings: JSON
  isActive: Boolean
}

input WorkflowStepInput {
  type: String!
  name: String!
  config: JSON!
  conditions: JSON
}

input CreateWebhookInput {
  url: String!
  events: [String!]!
  headers: JSON
  secret: String
}

input CreateTemplateInput {
  name: String!
  subject: String!
  htmlBody: String!
  textBody: String
  variables: [TemplateVariableInput!]
  category: String
  tags: [String!]
}

input TemplateVariableInput {
  name: String!
  type: String!
  required: Boolean!
  defaultValue: String
  description: String
}

# Root Types
type Query {
  # Email queries
  email(id: ID!): Email
  emails(
    filter: EmailFilter
    first: Int
    after: String
    last: Int
    before: String
    orderBy: String
    orderDirection: SortOrder
  ): EmailConnection!
  
  emailSearch(
    query: String!
    first: Int = 20
    after: String
  ): EmailConnection!
  
  emailConversation(conversationId: String!): [Email!]!
  
  # Workflow queries
  workflow(id: ID!): Workflow
  workflows(
    isActive: Boolean
    first: Int = 20
    after: String
  ): [Workflow!]!
  
  workflowExecutions(
    workflowId: ID
    emailId: ID
    status: WorkflowStatus
    first: Int = 20
    after: String
  ): [WorkflowExecution!]!
  
  # Plugin queries
  plugin(id: ID!): Plugin
  plugins(
    status: PluginStatus
    isGlobal: Boolean
  ): [Plugin!]!
  
  # Template queries
  template(id: ID!): EmailTemplate
  templates(
    category: String
    isActive: Boolean
    tags: [String!]
  ): [EmailTemplate!]!
  
  # User queries
  me: User
  user(id: ID!): User
  users(role: String): [User!]!
  
  # Webhook queries
  webhookEndpoint(id: ID!): WebhookEndpoint
  webhookEndpoints(isActive: Boolean): [WebhookEndpoint!]!
  
  # Stats queries
  systemStats(
    startDate: DateTime
    endDate: DateTime
  ): SystemStats!
  
  # API Key queries
  apiKey(id: ID!): ApiKey
  apiKeys: [ApiKey!]!
}

type Mutation {
  # Email mutations
  createEmail(input: CreateEmailInput!): Email!
  updateEmail(id: ID!, input: UpdateEmailInput!): Email!
  deleteEmail(id: ID!): Boolean!
  
  tagEmail(id: ID!, tags: [String!]!): Email!
  untagEmail(id: ID!, tags: [String!]!): Email!
  
  markEmailAsSpam(id: ID!): Email!
  markEmailAsNotSpam(id: ID!): Email!
  
  resendEmail(id: ID!): Email!
  forwardEmail(id: ID!, to: [EmailAddressInput!]!): Email!
  
  # Workflow mutations
  createWorkflow(input: CreateWorkflowInput!): Workflow!
  updateWorkflow(id: ID!, input: CreateWorkflowInput!): Workflow!
  deleteWorkflow(id: ID!): Boolean!
  
  executeWorkflow(id: ID!, emailId: ID): WorkflowExecution!
  cancelWorkflowExecution(id: ID!): WorkflowExecution!
  
  # Plugin mutations
  installPlugin(url: String!): Plugin!
  updatePluginConfig(id: ID!, config: JSON!): Plugin!
  activatePlugin(id: ID!): Plugin!
  deactivatePlugin(id: ID!): Plugin!
  uninstallPlugin(id: ID!): Boolean!
  
  # Template mutations
  createTemplate(input: CreateTemplateInput!): EmailTemplate!
  updateTemplate(id: ID!, input: CreateTemplateInput!): EmailTemplate!
  deleteTemplate(id: ID!): Boolean!
  
  sendTemplatedEmail(
    templateId: ID!
    to: [EmailAddressInput!]!
    variables: JSON!
  ): Email!
  
  # Webhook mutations
  createWebhookEndpoint(input: CreateWebhookInput!): WebhookEndpoint!
  updateWebhookEndpoint(id: ID!, input: CreateWebhookInput!): WebhookEndpoint!
  deleteWebhookEndpoint(id: ID!): Boolean!
  testWebhookEndpoint(id: ID!): Boolean!
  
  # User mutations
  updateProfile(name: String, settings: JSON): User!
  
  # API Key mutations
  createApiKey(
    name: String!
    permissions: [String!]!
    expiresAt: DateTime
  ): ApiKeyCreated!
  revokeApiKey(id: ID!): Boolean!
}

type ApiKeyCreated {
  apiKey: ApiKey!
  secretKey: String!
}

type Subscription {
  # Email subscriptions
  emailReceived(
    filter: EmailFilter
  ): Email!
  
  emailStatusChanged(
    emailId: ID
    status: EmailStatus
  ): Email!
  
  # Workflow subscriptions
  workflowExecutionStarted(
    workflowId: ID
  ): WorkflowExecution!
  
  workflowExecutionCompleted(
    workflowId: ID
    status: WorkflowStatus
  ): WorkflowExecution!
  
  # System subscriptions
  systemAlert(
    severity: String
  ): SystemAlert!
  
  statsUpdated: SystemStats!
}

type SystemAlert {
  id: ID!
  severity: String!
  message: String!
  details: JSON
  timestamp: DateTime!
}