# =============================================================================
# Pat Fortress GraphQL API - Multi-stage Production Dockerfile
# =============================================================================

# ================================
# Stage 1: Node.js Builder
# ================================
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk --no-cache add python3 make g++ ca-certificates && \
    addgroup -g 1001 fortress && \
    adduser -D -s /bin/sh -u 1001 -G fortress fortress

WORKDIR /build

# Copy package files
COPY api/graphql/package*.json ./
COPY api/graphql/tsconfig.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY api/graphql/ ./

# Build TypeScript application
RUN npm run build && \
    npm prune --production && \
    npm cache clean --force

# ================================
# Stage 2: Go Builder (for any Go components)
# ================================
FROM golang:1.21-alpine AS go-builder

RUN apk --no-cache add ca-certificates git tzdata

WORKDIR /build

COPY go.mod go.sum ./
RUN go mod download

COPY . .

# Build any Go utilities needed by the API
RUN CGO_ENABLED=0 go build -o bin/fortress-utils ./cmd/utils/main.go 2>/dev/null || echo "No Go utilities to build"

# ================================
# Stage 3: Production Runtime
# ================================
FROM node:18-alpine AS production

# Install runtime dependencies and security updates
RUN apk --no-cache add ca-certificates curl tzdata dumb-init && \
    apk upgrade && \
    addgroup -g 1001 fortress && \
    adduser -D -s /bin/sh -u 1001 -G fortress fortress

# Create application directories
RUN mkdir -p /app/logs /app/temp /app/config /app/uploads && \
    chown -R 1001:1001 /app

WORKDIR /app

# Copy built application
COPY --from=builder --chown=1001:1001 /build/dist ./dist
COPY --from=builder --chown=1001:1001 /build/node_modules ./node_modules
COPY --from=builder --chown=1001:1001 /build/package.json ./

# Copy Go utilities if they exist
COPY --from=go-builder --chown=1001:1001 /build/bin/* /usr/local/bin/ 2>/dev/null || true

# Copy configuration
COPY --chown=1001:1001 api/graphql/config/ ./config/

# Switch to non-root user
USER 1001:1001

# Environment variables
ENV NODE_ENV=production \
    PORT=8025 \
    API_PORT=8025 \
    GRAPHQL_PLAYGROUND=false \
    GRAPHQL_INTROSPECTION=false \
    CORS_ENABLED=true \
    RATE_LIMIT_ENABLED=true \
    LOG_LEVEL=info \
    MAX_QUERY_COMPLEXITY=1000 \
    MAX_QUERY_DEPTH=10

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose API port
EXPOSE 8025

# Graceful shutdown
STOPSIGNAL SIGTERM

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the API server
CMD ["node", "dist/server.js"]

# ================================
# Development Stage
# ================================
FROM node:18-alpine AS development

RUN apk --no-cache add ca-certificates curl tzdata python3 make g++ && \
    addgroup -g 1001 fortress && \
    adduser -D -s /bin/sh -u 1001 -G fortress fortress

WORKDIR /app

# Install development dependencies
RUN npm install -g nodemon ts-node typescript

# Copy package files
COPY api/graphql/package*.json ./
RUN npm install

# Copy source
COPY api/graphql/ ./

# Create directories
RUN mkdir -p logs temp && \
    chown -R 1001:1001 /app

USER 1001:1001

# Development environment
ENV NODE_ENV=development \
    GRAPHQL_PLAYGROUND=true \
    GRAPHQL_INTROSPECTION=true \
    LOG_LEVEL=debug

# Development health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8025/health || exit 1

EXPOSE 8025

# Development with hot reload
CMD ["npm", "run", "dev"]