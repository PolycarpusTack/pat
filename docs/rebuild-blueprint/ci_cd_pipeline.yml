name: MailHog CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  schedule:
    # Weekly dependency check
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: 'docker.io'
  DOCKER_IMAGE: 'mailhog/mailhog'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
    
    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m
    
    - name: Check go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go: ['1.19', '1.20', '1.21']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        cache: true
    
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-${{ matrix.os }}-go${{ matrix.go }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
    
    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'gosec-results.sarif'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Build binaries
      run: |
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=${{ github.sha }}" -o dist/mailhog-linux-amd64
        GOOS=linux GOARCH=arm64 go build -ldflags="-X main.version=${{ github.sha }}" -o dist/mailhog-linux-arm64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=${{ github.sha }}" -o dist/mailhog-darwin-amd64
        GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.version=${{ github.sha }}" -o dist/mailhog-darwin-arm64
        GOOS=windows GOARCH=amd64 go build -ldflags="-X main.version=${{ github.sha }}" -o dist/mailhog-windows-amd64.exe
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: dist/
        retention-days: 7

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Run integration tests
      env:
        MH_MONGO_URI: mongodb://localhost:27017
      run: |
        go test -v -tags=integration ./...
    
    - name: Test Docker image
      run: |
        docker run -d -p 1025:1025 -p 8025:8025 --name mailhog ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
        sleep 5
        curl -f http://localhost:8025/api/v2/messages || exit 1
        echo "Test email" | nc -w1 localhost 1025 || exit 1

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker, integration-test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: dist/
    
    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        body: |
          ## Docker Image
          ```bash
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
          ```
          
          ## Binary Downloads
          See assets below for platform-specific binaries.
          
          ## Changelog
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Build documentation
      run: |
        npm install -g @redocly/cli
        redocly build-docs docs/rebuild-blueprint/api_specifications/mailhog-api-v2.yaml -o dist/api-docs.html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: mailhog
        tag-name: ${{ github.ref_name }}
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Pipeline Status: ${{ job.status }}
          Workflow: ${{ github.workflow }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

# Reusable workflow for documentation updates
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Update dependencies documentation
      run: |
        go list -m -json all > docs/dependencies.json
        go mod graph > docs/dependency-graph.txt
    
    - name: Generate API documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        godoc -http=:6060 &
        sleep 5
        wget -r -np -k -E -p -erobots=off http://localhost:6060/pkg/github.com/mailhog/
    
    - name: Create PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'docs: automated documentation update'
        title: 'üìù Automated Documentation Update'
        body: |
          This PR contains automated documentation updates:
          - Updated dependency list
          - Regenerated API documentation
          - Updated dependency graph
        branch: docs/auto-update
        delete-branch: true