version: '3.8'

services:
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"     # SMTP server
      - "8025:8025"     # Web UI
    environment:
      MH_STORAGE: ${MH_STORAGE:-memory}
      MH_MAILDIR_PATH: /maildir
      MH_MONGO_URI: ${MH_MONGO_URI:-mongodb://mongo:27017}
      MH_MONGO_DB: ${MH_MONGO_DB:-mailhog}
      MH_MONGO_COLLECTION: ${MH_MONGO_COLLECTION:-messages}
      MH_UI_WEB_PATH: ${MH_UI_WEB_PATH:-}
      MH_AUTH_FILE: ${MH_AUTH_FILE:-}
      MH_CORS_ORIGIN: ${MH_CORS_ORIGIN:-}
    volumes:
      - mailhog-data:/maildir
      - ./auth.txt:/auth.txt:ro
    networks:
      - mailhog-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025/api/v2/messages?limit=1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Optional MongoDB for persistent storage
  mongo:
    image: mongo:7.0
    container_name: mailhog-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: mailhog
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - mailhog-network
    profiles:
      - mongodb
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Optional Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mailhog-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - mailhog-network
    profiles:
      - proxy
    depends_on:
      - mailhog

volumes:
  mailhog-data:
    driver: local
  mongo-data:
    driver: local
  mongo-config:
    driver: local

networks:
  mailhog-network:
    driver: bridge

# Example nginx.conf for reverse proxy setup
# server {
#     listen 80;
#     server_name mail.dev.local;
#     
#     location / {
#         proxy_pass http://mailhog:8025;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         
#         # WebSocket support for real-time updates
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#     }
#     
#     location /smtp {
#         return 301 $scheme://$host:1025;
#     }
# }

# Usage examples:
# 
# 1. Basic in-memory storage:
#    docker-compose up
#
# 2. With MongoDB storage:
#    docker-compose --profile mongodb up
#
# 3. With Nginx reverse proxy:
#    docker-compose --profile proxy up
#
# 4. Full stack with all options:
#    docker-compose --profile mongodb --profile proxy up
#
# 5. Custom configuration:
#    MH_STORAGE=mongodb MH_AUTH_FILE=/auth.txt docker-compose --profile mongodb up